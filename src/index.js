/* @flow */
"use strict";

import { recursiveWalkTree } from './parse';

import fs from 'fs';
import path from 'path';
import ts from 'typescript';

import { readFileSync } from "fs";

import program from 'commander';

const version = '1.0.0';

const intro = (moduleName) => `/**
 * Flowtype definitions for ${moduleName}
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v${version}
 * Author: [Joar Wilk](http://twitter.com/joarwilk)
 * Repo: http://github.com/joarwilk/flowgen
 */

`;

program
  .version(version)
  .arguments('[files...]')
  .option('-o --output-file [outputFile]', 'name for ouput file, defaults to export.flow.js', 'export.flow.js')
  .action((files, options) => {
    files.forEach(fileName => {
      const moduleName = path.basename(fileName).slice(0, -5);

      const sourceFile = ts.createSourceFile(fileName,
        readFileSync(fileName).toString(),
        ts.ScriptTarget.ES6,
        /*setParentNodes */ false
      );

      const rootNode = recursiveWalkTree(sourceFile);

      const output = rootNode.children.map(child => {
        return child.print();
      }).join('\n\n');

      fs.writeFile('./' + options.outputFile, intro(moduleName) + output, function(err) {
        if (err) {
          return console.log(err);
        }

        console.log('Completed! Nodes exported');
      });
    });
  });

program.parse(process.argv);

if (!process.argv.slice(2).length) {
  program.outputHelp();
}
