// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`should handle all properties 1`] = `
"declare interface Props {
  \\"aria-label\\": string;
  \\"aria-labelledby\\"?: number;
  color: string;
  [key: string]: string;
}
"
`;

exports[`should handle interface inheritance 1`] = `
"declare interface User {
  firstName: string;
}
declare type SpecialUser = {
  nice: number
} & User;
"
`;

exports[`should handle interface inheritance 2`] = `
"declare type User = {
  firstName: string
};
declare type SpecialUser = {
  ...$Exact<User>,

  nice: number
};
"
`;

exports[`should handle interface merging 1`] = `
"declare interface User {
  firstName: string;
  lastName: string;
  username: string;
}
"
`;

exports[`should handle interface merging 2`] = `
"declare type User = {
  firstName: string,
  lastName: string,
  username: string
};
"
`;

exports[`should handle single interface 1`] = `
"declare interface User {
  firstName: string;
}
"
`;

exports[`should handle single interface 2`] = `
"declare type User = {
  firstName: string
};
"
`;

exports[`should handle toString property name 1`] = `
"declare interface A {
  toString(): string;
}
"
`;

exports[`should support call signature 1`] = `
"declare interface ObjectSchemaConstructor {
  <T: { [key: string]: any }>(
    fields?: ObjectSchemaDefinition<T>
  ): ObjectSchema<T>;
  new(): ObjectSchema<{}>;
}
"
`;

exports[`should support optional methods 1`] = `
"declare interface Example<State> {
  required<R>(value: any, state: State): true;
  optional?: <R>(value: any, state: State) => false;
}
"
`;

exports[`should support readonly modifier 1`] = `
"declare interface Helper {
  +name: string;
  +callback: () => void;
}
"
`;
